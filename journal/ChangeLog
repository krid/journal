2010-09-19  Dirk Bergstrom  <krid@otisbean.com>

Add in MIT Simile project Timeline support.  Fix a few bugs.

	* diary/models.py (Entry.__unicode__): Use date instead of created.
	(*.as_timeline_dict): Render models for inclusion into Timeline.
	(SocialEvent.company): Make optional.
	(DiningOut.company, consumables): Make optional.
	(Consumable.referred_by): Make optional.
	(DateWithOptionalTimeMixin): Holds a utility method for Event & Period.
	(Event, Period): Models for LifeLine display.

	* diary/views.py: Views for the timeline page, and a pseudo-view
	to allow {% url static %} in templates.
	
	* diary/admin.py: Simple admin for Event & Period.

	* diary/templates/timeline.html: Timeline support.

	* diary/templates/base.html: A stab at giving the project some L&F.
	
	* diary/templates/404 & 505.html: Error pages.

    * static/*: Directory for non-Django content.

    * static/timeline: Timeline code.

	* settings.py: Separate dev & production .ini files.
	Set up media directory and template loading.
	
2010-09-16  Dirk Bergstrom  <krid@otisbean.com>

	* settings.py: Fixed a bug in handling of DEVELOPMENT & DEBUG flags.

	* diary/models.py (Consumable): Added __str__ and __unicode__ methods.
	(MedicalObservation): Model to track health issues.
	(Activity): Changed __unicode__ to use self.entry.date instead of created.

	* diary/admin.py: Added fu for MedicalObservation & Consumable.

    * (all files): Added copyright and GPLv3 verbiage.

2010-09-14  Dirk Bergstrom  <krid@otisbean.com>

This commit brings the app to the bare minimum for usability.

	* diary/models.py (Entry): Add date field, and order by it.  Add
	relation to Consumables.
	(Consumable): New model for yummy stuff.
	(DiningOut): Add where field and relation to Consumables.
    (*): Proper use of blank and null attrs in model fields.	
 
	* diary/admin.py (EntryAdmin): Use date instead of created, add
	inline for Consumables.
	(*Inline): Comment out fields attr, to see if that makes working in the
	Django admin easier.
	
	* apache/app.wsgi: Entry point for mod_wsgi.
	
 	* settings.py: Use DEVELOPMENT environment variable to control various
	settings.
	
